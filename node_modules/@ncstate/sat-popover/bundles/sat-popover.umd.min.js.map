{"version":3,"sources":["../../../src/lib/popover/popover.errors.ts","../../../src/lib/popover/popover-anchor.directive.ts","../../../node_modules/@angular/packages/cdk/esm5/bidi/directionality.js","../../../node_modules/@angular/packages/cdk/esm5/bidi/dir.js","../../../node_modules/@angular/packages/cdk/esm5/bidi/bidi-module.js","../../../src/lib/popover/popover.animations.ts","../../../src/lib/popover/notification.service.ts","../../../src/lib/popover/popover.component.ts","../../../src/lib/popover/popover.module.ts"],"names":["getInvalidPopoverError","Error","getUnanchoredPopoverError","getInvalidHorizontalAlignError","alignment","generateGenericError","VALID_HORIZ_ALIGN","getInvalidVerticalAlignError","VALID_VERT_ALIGN","getInvalidScrollStrategyError","strategy","VALID_SCROLL","apiName","invalid","valid","map","v","join","getHorizontalConnectionPosPair","h","originX","overlayX","getVerticalConnectionPosPair","originY","overlayY","getHorizontalPopoverAlignment","getVerticalPopoverAlignment","prioritizeAroundTarget","target","options","targetIndex","indexOf","reordered","left","slice","right","length","reverse","push","pop","DIR_DOCUMENT","InjectionToken","Directionality","_document","this","value","change","EventEmitter","bodyDir","body","dir","htmlDir","documentElement","decorators","type","Injectable","ctorParameters","undefined","Optional","Inject","args","Dir","_dir","_isInitialized","Object","defineProperty","prototype","get","set","old","emit","enumerable","configurable","ngAfterContentInit","Directive","selector","providers","provide","useExisting","host","[dir]","exportAs","propDecorators","Output","Input","BidiModule","NgModule","exports","declarations","DOCUMENT","transformPopover","trigger","transition","style","opacity","transform","animate","PopoverNotification","action","Subject","PopoverNotificationService","dispatch","notification","store","next","events","asObservable","DEFAULT_TRANSITION","SatPopover","_focusTrapFactory","_horizontalAlign","val","_validateHorizontalAlign","_dispatchConfigNotification","NotificationAction","REPOSITION","horizontalAlign","_verticalAlign","_validateVerticalAlign","verticalAlign","_scrollStrategy","_validateScrollStrategy","UPDATE_CONFIG","_hasBackdrop","coerceBooleanProperty","_openTransition","_closeTransition","ngOnInit","_setAlignmentClasses","open","OPEN","_dispatchActionNotification","close","CLOSE","toggle","TOGGLE","isOpen","_open","_getAnimation","params","openTransition","closeTransition","_onAnimationDone","event","toState","_trapFocus","afterOpen","_restoreFocus","afterClose","horizAlign","vertAlign","_classList","_savePreviouslyFocusedElement","_focusTrapElement","_focusTrap","create","nativeElement","focusInitialElementWhenReady","toFocus","_previouslyFocusedElement","focus","destroy","_notifications","pos","Component","encapsulation","ViewEncapsulation","None","animations","styles","template","FocusTrapFactory","ViewChild","TemplateRef","SatPopoverAnchor","_overlay","_elementRef","_viewContainerRef","_ngZone","_attachedPopover","_validateAttachedPopover","isPopoverOpen","_popoverOpen","_subscribeToNotifications","attachedPopover","ngOnDestroy","_onDestroy","complete","_destroyPopover","togglePopover","closePopover","openPopover","_createOverlay","_overlayRef","attach","_portal","_subscribeToBackdrop","_subscribeToEscape","_subscribeToDetachments","_saveOpenedState","_saveClosedState","detach","_getDirection","dispose","_destroyPopoverOnceClosed","detachments","pipe","take","takeUntil","subscribe","_this","popover","backdropClick","popoverClosed","backdropClicked","keydownEvents","tap","overlayKeydown","filter","keyCode","ESCAPE","popoverOpened","opened","closed","TemplatePortal","_templateRef","config","_getOverlayConfig","_subscribeToPositionChanges","OverlayConfig","positionStrategy","_getPositionStrategy","hasBackdrop","backdropClass","scrollStrategy","_getScrollStrategyInstance","direction","position","onPositionChange","run","connectionPair","scrollStrategies","block","reposition","noop","horizontalTarget","verticalTarget","_a","_b","connectedTo","withDirection","_addFallbacks","hTarget","vTarget","horizontalOverlapAllowed","verticalOverlapAllowed","possibleHorizontalAlignments","possibleVerticalAlignments","fallbacks","forEach","_applyFallback","withFallbackPosition","Overlay","ElementRef","ViewContainerRef","NgZone","SatPopoverModule","imports","CommonModule","OverlayModule","A11yModule"],"mappings":"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","file":"sat-popover.umd.min.js","sourcesContent":["import { VALID_HORIZ_ALIGN, VALID_VERT_ALIGN, VALID_SCROLL } from './popover.component';\n\nexport function getInvalidPopoverError(): Error {\n  return Error('SatPopoverAnchor must be provided an SatPopover component instance.');\n}\n\nexport function getUnanchoredPopoverError(): Error {\n  return Error('SatPopover is not anchored to any SatPopoverAnchor.');\n}\n\nexport function getInvalidHorizontalAlignError(alignment): Error {\n  return Error(generateGenericError('horizontalAlign/xAlign', alignment, VALID_HORIZ_ALIGN));\n}\n\nexport function getInvalidVerticalAlignError(alignment): Error {\n  return Error(generateGenericError('verticalAlign/yAlign', alignment, VALID_VERT_ALIGN));\n}\n\nexport function getInvalidScrollStrategyError(strategy): Error {\n  return Error(generateGenericError('scrollStrategy', strategy, VALID_SCROLL));\n}\n\nfunction generateGenericError(apiName: string, invalid: any, valid: string[]): string {\n  return `Invalid ${apiName}: '${invalid}'. Valid options are ` +\n    `${valid.map(v => `'${v}'`).join(', ')}.`;\n}\n","import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnInit,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewContainerRef\n} from '@angular/core';\nimport {\n  ConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport { Direction, Directionality } from '@angular/cdk/bidi';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { ESCAPE } from '@angular/cdk/keycodes';\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable';\nimport { take } from 'rxjs/operators/take';\nimport { switchMap } from 'rxjs/operators/switchMap';\nimport { takeUntil } from 'rxjs/operators/takeUntil';\nimport { filter } from 'rxjs/operators/filter';\nimport { tap } from 'rxjs/operators/tap';\nimport { merge } from 'rxjs/observable/merge';\n\nimport {\n  SatPopover,\n  SatPopoverHorizontalAlign,\n  SatPopoverVerticalAlign,\n  SatPopoverScrollStrategy,\n} from './popover.component';\nimport { NotificationAction, PopoverNotificationService } from './notification.service';\nimport { getInvalidPopoverError } from './popover.errors';\n\n@Directive({\n  selector: '[satPopoverAnchorFor]',\n  exportAs: 'satPopoverAnchor',\n  providers: [PopoverNotificationService],\n})\nexport class SatPopoverAnchor implements OnInit, OnDestroy {\n\n  /** Reference to the popover instance. */\n  @Input('satPopoverAnchorFor')\n  get attachedPopover() { return this._attachedPopover; }\n  set attachedPopover(value: SatPopover) {\n    // ensure that value is a popover\n    this._validateAttachedPopover(value);\n    // store value and provide notification service as a communication\n    // channel between popover and anchor\n    this._attachedPopover = value;\n    this._attachedPopover._notifications = this._notifications;\n  }\n  private _attachedPopover: SatPopover;\n\n  /** Emits when the popover is opened. */\n  @Output() popoverOpened = new EventEmitter<void>();\n\n  /** Emits when the popover is closed. */\n  @Output() popoverClosed = new EventEmitter<any>();\n\n  /** Gets whether the popover is presently open. */\n  isPopoverOpen(): boolean {\n    return this._popoverOpen;\n  }\n\n  /** Reference to the overlay containing the popover component. */\n  _overlayRef: OverlayRef;\n\n  /** Whether the popover is presently open. */\n  private _popoverOpen = false;\n\n  /** Reference to a template portal where the overlay will be attached. */\n  private _portal: TemplatePortal<any>;\n\n  /** Emits when the directive is destroyed. */\n  private _onDestroy = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _viewContainerRef: ViewContainerRef,\n    private _notifications: PopoverNotificationService,\n    private _ngZone: NgZone,\n    @Optional() private _dir: Directionality\n  ) { }\n\n  ngOnInit() {\n    this._subscribeToNotifications();\n    this._validateAttachedPopover(this.attachedPopover);\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n    this._destroyPopover();\n  }\n\n  /** Toggles the popover between the open and closed states. */\n  togglePopover(): void {\n    return this._popoverOpen ? this.closePopover() : this.openPopover();\n  }\n\n  /** Opens the popover. */\n  openPopover(): void {\n    if (!this._popoverOpen) {\n      this._createOverlay();\n      this._overlayRef.attach(this._portal);\n      this._subscribeToBackdrop();\n      this._subscribeToEscape();\n      this._subscribeToDetachments();\n      this._saveOpenedState();\n    }\n  }\n\n  /** Closes the popover. */\n  closePopover(value?: any): void {\n    if (this._overlayRef) {\n      this._saveClosedState(value);\n      this._overlayRef.detach();\n    }\n  }\n\n  /** Gets the text direction of the containing app. */\n  private _getDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Removes the popover from the DOM. Does NOT update open state. */\n  private _destroyPopover(): void {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  /**\n   * Destroys the popover immediately if it is closed, or waits until it\n   * has been closed to destroy it.\n   */\n  private _destroyPopoverOnceClosed(): void {\n    if (this.isPopoverOpen() && this._overlayRef) {\n      this._overlayRef.detachments().pipe(\n        take(1),\n        takeUntil(this._onDestroy)\n      ).subscribe(() => this._destroyPopover());\n    } else {\n      this._destroyPopover();\n    }\n  }\n\n  /** Throws an error if the popover instance is not provided. */\n  private _validateAttachedPopover(popover: SatPopover): void {\n    if (!popover || !(popover instanceof SatPopover)) {\n      throw getInvalidPopoverError();\n    }\n  }\n\n  /**\n   * Call appropriate anchor method when an event is dispatched through\n   * the notification service.\n   */\n  private _subscribeToNotifications(): void {\n    this._notifications.events()\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(event => {\n        switch (event.action) {\n          case NotificationAction.OPEN:\n            this.openPopover();\n            break;\n          case NotificationAction.CLOSE:\n            this.closePopover(event.value);\n            break;\n          case NotificationAction.TOGGLE:\n            this.togglePopover();\n            break;\n          case NotificationAction.REPOSITION:\n            // TODO: When the overlay's position can be dynamically changed, do not destroy\n          case NotificationAction.UPDATE_CONFIG:\n            this._destroyPopoverOnceClosed();\n            break;\n        }\n      });\n  }\n\n  /** Close popover when backdrop is clicked. */\n  private _subscribeToBackdrop(): void {\n    this._overlayRef\n      .backdropClick()\n      .pipe(\n        takeUntil(this.popoverClosed),\n        takeUntil(this._onDestroy)\n      )\n      .subscribe(() => {\n        this.attachedPopover.backdropClicked.emit();\n        this.closePopover();\n      });\n  }\n\n  /** Close popover when escape keydown event occurs. */\n  private _subscribeToEscape(): void {\n    this._overlayRef\n      .keydownEvents()\n      .pipe(\n        tap(event => this.attachedPopover.overlayKeydown.emit(event)),\n        filter(event => event.keyCode === ESCAPE),\n        takeUntil(this.popoverClosed),\n        takeUntil(this._onDestroy)\n      )\n      .subscribe(() => this.closePopover());\n  }\n\n  /** Set state back to closed when detached. */\n  private _subscribeToDetachments(): void {\n    this._overlayRef\n      .detachments()\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(() => this._saveClosedState());\n  }\n\n  /** Save the opened state of the popover and emit. */\n  private _saveOpenedState(): void {\n    if (!this._popoverOpen) {\n      this.attachedPopover._open = this._popoverOpen = true;\n\n      this.popoverOpened.emit();\n      this.attachedPopover.opened.emit();\n    }\n  }\n\n  /** Save the closed state of the popover and emit. */\n  private _saveClosedState(value?: any): void {\n    if (this._popoverOpen) {\n      this.attachedPopover._open = this._popoverOpen = false;\n\n      this.popoverClosed.emit(value);\n      this.attachedPopover.closed.emit(value);\n    }\n  }\n\n  /** Create an overlay to be attached to the portal. */\n  private _createOverlay(): void {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.attachedPopover._templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositionChanges(config.positionStrategy as ConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n  }\n\n  /** Create and return a config for creating the overlay. */\n  private _getOverlayConfig(): OverlayConfig {\n    const config = new OverlayConfig({\n      positionStrategy: this._getPositionStrategy(),\n      hasBackdrop: this.attachedPopover.hasBackdrop,\n      backdropClass: this.attachedPopover.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._getScrollStrategyInstance(this.attachedPopover.scrollStrategy),\n      direction: this._getDirection(),\n    });\n\n    return config;\n  }\n\n  /**\n   * Listen to changes in the position of the overlay and set the correct alignment classes,\n   * ensuring that the animation origin is correct, even with a fallback position.\n   */\n  private _subscribeToPositionChanges(position: ConnectedPositionStrategy): void {\n    position.onPositionChange\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(change => {\n        // Position changes may occur outside the Angular zone\n        this._ngZone.run(() => {\n          this.attachedPopover._setAlignmentClasses(\n            getHorizontalPopoverAlignment(change.connectionPair.overlayX),\n            getVerticalPopoverAlignment(change.connectionPair.overlayY),\n          );\n        });\n      });\n  }\n\n  /** Map a scroll strategy string type to an instance of a scroll strategy. */\n  private _getScrollStrategyInstance(strategy: SatPopoverScrollStrategy): ScrollStrategy {\n    // TODO support 'close' on resolution of https://github.com/angular/material2/issues/7922\n    switch (strategy) {\n      case 'block':\n        return this._overlay.scrollStrategies.block();\n      case 'reposition':\n        return this._overlay.scrollStrategies.reposition();\n      case 'close':\n        return this._overlay.scrollStrategies.close();\n      case 'noop':\n      default:\n        return this._overlay.scrollStrategies.noop();\n    }\n  }\n\n  /** Create and return a position strategy based on config provided to the component instance. */\n  private _getPositionStrategy(): ConnectedPositionStrategy {\n    const horizontalTarget = this.attachedPopover.horizontalAlign;\n    const verticalTarget = this.attachedPopover.verticalAlign;\n\n    // Attach the overlay at the preferred position\n    const {originX, overlayX} = getHorizontalConnectionPosPair(horizontalTarget);\n    const {originY, overlayY} = getVerticalConnectionPosPair(verticalTarget);\n    const strategy = this._overlay.position()\n      .connectedTo(this._elementRef, {originX, originY}, {overlayX, overlayY})\n      .withDirection(this._getDirection());\n\n    // Add fallbacks based on the preferred positions\n    this._addFallbacks(strategy, horizontalTarget, verticalTarget);\n\n    return strategy;\n  }\n\n  /** Add fallbacks to a given strategy based around target alignments. */\n  private _addFallbacks(strategy: ConnectedPositionStrategy, hTarget: SatPopoverHorizontalAlign,\n        vTarget: SatPopoverVerticalAlign): void {\n    // Determine if the target alignments overlap the anchor\n    const horizontalOverlapAllowed = hTarget !== 'before' && hTarget !== 'after';\n    const verticalOverlapAllowed = vTarget !== 'above' && vTarget !== 'below';\n\n    // If a target alignment doesn't cover the anchor, don't let any of the fallback alignments\n    // cover the anchor\n    const possibleHorizontalAlignments = horizontalOverlapAllowed ?\n      ['before', 'start', 'center', 'end', 'after'] :\n      ['before', 'after'];\n    const possibleVerticalAlignments = verticalOverlapAllowed ?\n      ['above', 'start', 'center', 'end', 'below'] :\n      ['above', 'below'];\n\n    // Create fallbacks for each allowed prioritized fallback alignment combo\n    const fallbacks = [];\n    prioritizeAroundTarget(hTarget, possibleHorizontalAlignments).forEach(h => {\n      prioritizeAroundTarget(vTarget, possibleVerticalAlignments).forEach(v => {\n        fallbacks.push({h, v});\n      });\n    });\n\n    // Remove the first fallback since it will be the target alignment that is already applied\n    fallbacks.slice(1, fallbacks.length)\n      .forEach(({h, v}) => this._applyFallback(strategy, h, v));\n  }\n\n  /**\n   * Convert a specific horizontal and vertical alignment into a fallback and apply it to\n   * the strategy.\n   */\n  private _applyFallback(strategy, horizontalAlign, verticalAlign): void {\n    const {originX, overlayX} = getHorizontalConnectionPosPair(horizontalAlign);\n    const {originY, overlayY} = getVerticalConnectionPosPair(verticalAlign);\n    strategy.withFallbackPosition({originX, originY}, {overlayX, overlayY});\n  }\n\n}\n\n/** Helper function to convert alignment to origin/overlay position pair. */\nfunction getHorizontalConnectionPosPair(h: SatPopoverHorizontalAlign):\n    {originX: HorizontalConnectionPos, overlayX: HorizontalConnectionPos} {\n  switch (h) {\n    case 'before':\n      return {originX: 'start', overlayX: 'end'};\n    case 'start':\n      return {originX: 'start', overlayX: 'start'};\n    case 'end':\n      return {originX: 'end', overlayX: 'end'};\n    case 'after':\n      return {originX: 'end', overlayX: 'start'};\n    default:\n      return {originX: 'center', overlayX: 'center'};\n  }\n}\n\n/** Helper function to convert alignment to origin/overlay position pair. */\nfunction getVerticalConnectionPosPair(v: SatPopoverVerticalAlign):\n    {originY: VerticalConnectionPos, overlayY: VerticalConnectionPos} {\n  switch (v) {\n    case 'above':\n      return {originY: 'top', overlayY: 'bottom'};\n    case 'start':\n      return {originY: 'top', overlayY: 'top'};\n    case 'end':\n      return {originY: 'bottom', overlayY: 'bottom'};\n    case 'below':\n      return {originY: 'bottom', overlayY: 'top'};\n    default:\n      return {originY: 'center', overlayY: 'center'};\n  }\n}\n\n/** Helper function to convert an overlay connection position to equivalent popover alignment. */\nfunction getHorizontalPopoverAlignment(h: HorizontalConnectionPos): SatPopoverHorizontalAlign {\n  if (h === 'start') {\n    return 'after';\n  }\n\n  if (h === 'end') {\n    return 'before';\n  }\n\n  return 'center';\n}\n\n/** Helper function to convert an overlay connection position to equivalent popover alignment. */\nfunction getVerticalPopoverAlignment(v: VerticalConnectionPos): SatPopoverVerticalAlign {\n  if (v === 'top') {\n    return 'below';\n  }\n\n  if (v === 'bottom') {\n    return 'above';\n  }\n\n  return 'center';\n}\n\n/**\n * Helper function that takes an ordered array options and returns a reorderded\n * array around the target item. e.g.:\n *\n * target: 3; options: [1, 2, 3, 4, 5, 6, 7];\n *\n * return: [3, 4, 2, 5, 1, 6, 7]\n */\nfunction prioritizeAroundTarget<T>(target: T, options: T[]): T[] {\n  const targetIndex = options.indexOf(target);\n\n  // Set the first item to be the target\n  const reordered = [target];\n\n  // Make left and right stacks where the highest priority item is last\n  const left = options.slice(0, targetIndex);\n  const right = options.slice(targetIndex + 1, options.length).reverse();\n\n  // Alternate between stacks until one is empty\n  while (left.length && right.length) {\n    reordered.push(right.pop());\n    reordered.push(left.pop());\n  }\n\n  // Flush out right side\n  while (right.length) {\n    reordered.push(right.pop());\n  }\n\n  // Flush out left side\n  while (left.length) {\n    reordered.push(left.pop());\n  }\n\n  return reordered;\n}\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter, Injectable, Optional, Inject, InjectionToken, } from \"@angular/core\";\n/**\n * Injection token used to inject the document into Directionality.\n * This is used so that the value can be faked in tests.\n *\n * We can't use the real document in tests because changing the real `dir` causes geometry-based\n * tests in Safari to fail.\n *\n * We also can't re-provide the DOCUMENT token from platform-brower because the unit tests\n * themselves use things like `querySelector` in test code.\n */\nexport var /** @type {?} */ DIR_DOCUMENT = new InjectionToken('cdk-dir-doc');\n/**\n * The directionality (LTR / RTL) context for the application (or a subtree of it).\n * Exposes the current direction and a stream of direction changes.\n */\nvar Directionality = (function () {\n    function Directionality(_document) {\n        /**\n         * The current 'ltr' or 'rtl' value.\n         */\n        this.value = 'ltr';\n        /**\n         * Stream that emits whenever the 'ltr' / 'rtl' state changes.\n         */\n        this.change = new EventEmitter();\n        if (_document) {\n            // TODO: handle 'auto' value -\n            // We still need to account for dir=\"auto\".\n            // It looks like HTMLElemenet.dir is also \"auto\" when that's set to the attribute,\n            // but getComputedStyle return either \"ltr\" or \"rtl\". avoiding getComputedStyle for now\n            var /** @type {?} */ bodyDir = _document.body ? _document.body.dir : null;\n            var /** @type {?} */ htmlDir = _document.documentElement ? _document.documentElement.dir : null;\n            this.value = /** @type {?} */ ((bodyDir || htmlDir || 'ltr'));\n        }\n    }\n    Directionality.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    Directionality.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DIR_DOCUMENT,] },] },\n    ]; };\n    return Directionality;\n}());\nexport { Directionality };\nfunction Directionality_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    Directionality.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    Directionality.ctorParameters;\n    /**\n     * The current 'ltr' or 'rtl' value.\n     * @type {?}\n     */\n    Directionality.prototype.value;\n    /**\n     * Stream that emits whenever the 'ltr' / 'rtl' state changes.\n     * @type {?}\n     */\n    Directionality.prototype.change;\n}\n//# sourceMappingURL=directionality.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, Output, Input, EventEmitter } from \"@angular/core\";\nimport { Directionality } from \"./directionality\";\n/**\n * Directive to listen for changes of direction of part of the DOM.\n *\n * Provides itself as Directionality such that descendant directives only need to ever inject\n * Directionality to get the closest direction.\n */\nvar Dir = (function () {\n    function Dir() {\n        this._dir = 'ltr';\n        /**\n         * Whether the `value` has been set to its initial value.\n         */\n        this._isInitialized = false;\n        /**\n         * Event emitted when the direction changes.\n         */\n        this.change = new EventEmitter();\n    }\n    Object.defineProperty(Dir.prototype, \"dir\", {\n        get: /**\n         * \\@docs-private\n         * @return {?}\n         */\n        function () { return this._dir; },\n        set: /**\n         * @param {?} v\n         * @return {?}\n         */\n        function (v) {\n            var /** @type {?} */ old = this._dir;\n            this._dir = v;\n            if (old !== this._dir && this._isInitialized) {\n                this.change.emit();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Dir.prototype, \"value\", {\n        /** Current layout direction of the element. */\n        get: /**\n         * Current layout direction of the element.\n         * @return {?}\n         */\n        function () { return this.dir; },\n        enumerable: true,\n        configurable: true\n    });\n    /** Initialize once default value has been set. */\n    /**\n     * Initialize once default value has been set.\n     * @return {?}\n     */\n    Dir.prototype.ngAfterContentInit = /**\n     * Initialize once default value has been set.\n     * @return {?}\n     */\n    function () {\n        this._isInitialized = true;\n    };\n    Dir.decorators = [\n        { type: Directive, args: [{\n                    selector: '[dir]',\n                    providers: [{ provide: Directionality, useExisting: Dir }],\n                    host: { '[dir]': 'dir' },\n                    exportAs: 'dir',\n                },] },\n    ];\n    /** @nocollapse */\n    Dir.ctorParameters = function () { return []; };\n    Dir.propDecorators = {\n        \"change\": [{ type: Output, args: ['dirChange',] },],\n        \"dir\": [{ type: Input, args: ['dir',] },],\n    };\n    return Dir;\n}());\nexport { Dir };\nfunction Dir_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    Dir.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    Dir.ctorParameters;\n    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */\n    Dir.propDecorators;\n    /** @type {?} */\n    Dir.prototype._dir;\n    /**\n     * Whether the `value` has been set to its initial value.\n     * @type {?}\n     */\n    Dir.prototype._isInitialized;\n    /**\n     * Event emitted when the direction changes.\n     * @type {?}\n     */\n    Dir.prototype.change;\n}\n//# sourceMappingURL=dir.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgModule } from \"@angular/core\";\nimport { DOCUMENT } from \"@angular/platform-browser\";\nimport { Dir } from \"./dir\";\nimport { DIR_DOCUMENT, Directionality } from \"./directionality\";\nvar BidiModule = (function () {\n    function BidiModule() {\n    }\n    BidiModule.decorators = [\n        { type: NgModule, args: [{\n                    exports: [Dir],\n                    declarations: [Dir],\n                    providers: [\n                        { provide: DIR_DOCUMENT, useExisting: DOCUMENT },\n                        Directionality,\n                    ]\n                },] },\n    ];\n    /** @nocollapse */\n    BidiModule.ctorParameters = function () { return []; };\n    return BidiModule;\n}());\nexport { BidiModule };\nfunction BidiModule_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    BidiModule.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    BidiModule.ctorParameters;\n}\n//# sourceMappingURL=bidi-module.js.map","import {\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationTriggerMetadata\n} from '@angular/animations';\n\nexport const transformPopover: AnimationTriggerMetadata = trigger('transformPopover', [\n  transition(':enter', [\n    style({opacity: 0, transform: 'scale(0.3)'}),\n    animate('{{openTransition}}',\n      style({opacity: 1, transform: 'scale(1)'}))\n  ]),\n  transition(':leave', [\n    animate('{{closeTransition}}',\n      style({opacity: 0, transform: 'scale(0.5)'}))\n  ])\n]);\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\n\n/** Enumerated actions for a popover to perform. */\nexport enum NotificationAction {\n  /** Popover should open. */\n  OPEN,\n  /** Popover should close. */\n  CLOSE,\n  /** Popover should toggle open or closed. */\n  TOGGLE,\n  /** Popover has new target positions. */\n  REPOSITION,\n  /** Popover needs new configuration. */\n  UPDATE_CONFIG,\n}\n\n/** Event object for dispatching to anchor. */\nexport class PopoverNotification {\n  constructor(\n    /** Action to perform. */\n    public action: NotificationAction,\n    /** Optional payload. */\n    public value?: any\n  ) { }\n}\n\n@Injectable()\nexport class PopoverNotificationService {\n\n  private store = new Subject<PopoverNotification>();\n\n  /** Dispatch a notification to all subscribers. */\n  dispatch(notification: PopoverNotification) {\n    this.store.next(notification);\n  }\n\n  /** Stream of notification events. */\n  events(): Observable<PopoverNotification> {\n    return this.store.asObservable();\n  }\n\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  ViewChild,\n  ViewEncapsulation,\n  TemplateRef,\n  OnInit,\n  Optional,\n  Output,\n} from '@angular/core';\nimport { AnimationEvent } from '@angular/animations';\nimport { DOCUMENT } from '@angular/platform-browser';\nimport { FocusTrap, FocusTrapFactory } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject } from 'rxjs/Subject';\n\nimport { transformPopover } from './popover.animations';\nimport {\n  NotificationAction,\n  PopoverNotification,\n  PopoverNotificationService,\n} from './notification.service';\nimport {\n  getUnanchoredPopoverError,\n  getInvalidHorizontalAlignError,\n  getInvalidVerticalAlignError,\n  getInvalidScrollStrategyError,\n} from './popover.errors';\n\nexport type SatPopoverScrollStrategy = 'noop' | 'block' | 'reposition' | 'close';\nexport type SatPopoverHorizontalAlign = 'before' | 'start' | 'center' | 'end' | 'after';\nexport type SatPopoverVerticalAlign = 'above'  | 'start' | 'center' | 'end' | 'below';\n\nexport const VALID_SCROLL: SatPopoverScrollStrategy[] = ['noop', 'block', 'reposition', 'close'];\nexport const VALID_HORIZ_ALIGN: SatPopoverHorizontalAlign[] =\n    ['before', 'start', 'center', 'end', 'after'];\nexport const VALID_VERT_ALIGN: SatPopoverVerticalAlign[] =\n    ['above', 'start', 'center', 'end', 'below'];\n\n// See http://cubic-bezier.com/#.25,.8,.25,1 for reference.\nconst DEFAULT_TRANSITION  = '200ms cubic-bezier(0.25, 0.8, 0.25, 1)';\n\n@Component({\n  selector: 'sat-popover',\n  encapsulation: ViewEncapsulation.None,\n  animations: [transformPopover],\n  styleUrls: ['./popover.component.scss'],\n  templateUrl: './popover.component.html',\n})\nexport class SatPopover implements OnInit {\n\n  /** Alignment of the popover on the horizontal axis. */\n  @Input()\n  get horizontalAlign() { return this._horizontalAlign; }\n  set horizontalAlign(val: SatPopoverHorizontalAlign) {\n    this._validateHorizontalAlign(val);\n    if (this._horizontalAlign !== val) {\n      this._horizontalAlign = val;\n      this._dispatchConfigNotification(new PopoverNotification(NotificationAction.REPOSITION));\n    }\n  }\n  private _horizontalAlign: SatPopoverHorizontalAlign = 'center';\n\n  /** Alignment of the popover on the x axis. Alias for `horizontalAlign`. */\n  @Input()\n  get xAlign() { return this.horizontalAlign; }\n  set xAlign(val: SatPopoverHorizontalAlign) { this.horizontalAlign = val; }\n\n  /** Alignment of the popover on the vertical axis. */\n  @Input()\n  get verticalAlign() { return this._verticalAlign; }\n  set verticalAlign(val: SatPopoverVerticalAlign) {\n    this._validateVerticalAlign(val);\n    if (this._verticalAlign !== val) {\n      this._verticalAlign = val;\n      this._dispatchConfigNotification(new PopoverNotification(NotificationAction.REPOSITION));\n    }\n  }\n  private _verticalAlign: SatPopoverVerticalAlign = 'center';\n\n  /** Alignment of the popover on the y axis. Alias for `verticalAlign`. */\n  @Input()\n  get yAlign() { return this.verticalAlign; }\n  set yAlign(val: SatPopoverVerticalAlign) { this.verticalAlign = val; }\n\n  /** How the popover should handle scrolling. */\n  @Input()\n  get scrollStrategy() { return this._scrollStrategy; }\n  set scrollStrategy(val: SatPopoverScrollStrategy) {\n    this._validateScrollStrategy(val);\n    if (this._scrollStrategy !== val) {\n      this._scrollStrategy = val;\n      this._dispatchConfigNotification(new PopoverNotification(NotificationAction.UPDATE_CONFIG));\n    }\n  }\n  private _scrollStrategy: SatPopoverScrollStrategy = 'reposition';\n\n  /** Whether the popover should have a backdrop (includes closing on click). */\n  @Input()\n  get hasBackdrop() { return this._hasBackdrop; }\n  set hasBackdrop(val: boolean) {\n    this._hasBackdrop = coerceBooleanProperty(val);\n  }\n  private _hasBackdrop = false;\n\n  /** Custom transition to use while opening. */\n  @Input()\n  get openTransition() { return this._openTransition; }\n  set openTransition(val: string) {\n    if (val) {\n      this._openTransition = val;\n    }\n  }\n  private _openTransition = DEFAULT_TRANSITION;\n\n  /** Custom transition to use while closing. */\n  @Input()\n  get closeTransition() { return this._closeTransition; }\n  set closeTransition(val: string) {\n    if (val) {\n      this._closeTransition = val;\n    }\n  }\n  private _closeTransition = DEFAULT_TRANSITION;\n\n  /** Optional backdrop class. */\n  @Input() backdropClass = '';\n\n  /** Emits when the popover is opened. */\n  @Output() opened = new EventEmitter<void>();\n\n  /** Emits when the popover is closed. */\n  @Output() closed = new EventEmitter<any>();\n\n  /** Emits when the popover has finished opening. */\n  @Output() afterOpen = new EventEmitter<void>();\n\n  /** Emits when the popover has finished closing. */\n  @Output() afterClose = new EventEmitter<void>();\n\n  /** Emits when the backdrop is clicked. */\n  @Output() backdropClicked = new EventEmitter<void>();\n\n  /** Emits when a keydown event is targeted to this popover's overlay. */\n  @Output() overlayKeydown = new EventEmitter<KeyboardEvent>();\n\n  /** Reference to template so it can be placed within a portal. */\n  @ViewChild(TemplateRef) _templateRef: TemplateRef<any>;\n\n  /** Classes to be added to the popover for setting the correct transform origin. */\n  _classList: any = {};\n\n  /** Whether the popover is presently open. */\n  _open = false;\n\n  /** Instance of notification service. Will be undefined until attached to an anchor. */\n  _notifications: PopoverNotificationService;\n\n  /** Reference to the element to build a focus trap around. */\n  @ViewChild('focusTrapElement')\n  private _focusTrapElement: ElementRef;\n\n  /** Reference to the element that was focused before opening. */\n  private _previouslyFocusedElement: HTMLElement;\n\n  /** Reference to a focus trap around the popover. */\n  private _focusTrap: FocusTrap;\n\n  constructor(\n    private _focusTrapFactory: FocusTrapFactory,\n    @Optional() @Inject(DOCUMENT) private _document: any\n  ) { }\n\n  ngOnInit() {\n    this._setAlignmentClasses();\n  }\n\n  /** Open this popover. */\n  open(): void {\n    const notification = new PopoverNotification(NotificationAction.OPEN);\n    this._dispatchActionNotification(notification);\n  }\n\n  /** Close this popover. */\n  close(value?: any): void {\n    const notification = new PopoverNotification(NotificationAction.CLOSE, value);\n    this._dispatchActionNotification(notification);\n  }\n\n  /** Toggle this popover open or closed. */\n  toggle(): void {\n    const notification = new PopoverNotification(NotificationAction.TOGGLE);\n    this._dispatchActionNotification(notification);\n  }\n\n  /** Gets whether the popover is presently open. */\n  isOpen(): boolean {\n    return this._open;\n  }\n\n  /** Gets an animation config with customized (or default) transition values. */\n  _getAnimation(): { value: any, params: any } {\n    return {\n      value: 'visible',\n      params: { openTransition: this.openTransition, closeTransition: this.closeTransition }\n    };\n  }\n\n  /** Callback for when the popover is finished animating in or out. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'visible') {\n      this._trapFocus();\n      this.afterOpen.emit();\n    } else if (event.toState === 'void') {\n      this._restoreFocus();\n      this.afterClose.emit();\n    }\n  }\n\n  /** Apply alignment classes based on alignment inputs. */\n  _setAlignmentClasses(horizAlign = this.horizontalAlign, vertAlign = this.verticalAlign) {\n    this._classList['sat-popover-before'] = horizAlign === 'before' || horizAlign === 'end';\n    this._classList['sat-popover-after']  = horizAlign === 'after' || horizAlign === 'start';\n\n    this._classList['sat-popover-above'] = vertAlign === 'above' || vertAlign === 'end';\n    this._classList['sat-popover-below'] = vertAlign === 'below' || vertAlign === 'start';\n\n    this._classList['sat-popover-center'] = horizAlign === 'center' || vertAlign === 'center';\n  }\n\n  /** Move the focus inside the focus trap and remember where to return later. */\n  private _trapFocus(): void {\n    this._savePreviouslyFocusedElement();\n\n    // There won't be a focus trap element if the close animation starts before open finishes\n    if (!this._focusTrapElement) {\n      return;\n    }\n\n    if (!this._focusTrap && this._focusTrapElement) {\n      this._focusTrap = this._focusTrapFactory.create(this._focusTrapElement.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restore focus to the element focused before the popover opened. Also destroy trap. */\n  private _restoreFocus(): void {\n    const toFocus = this._previouslyFocusedElement;\n\n    // Must check active element is focusable for IE sake\n    if (toFocus && 'focus' in toFocus) {\n      this._previouslyFocusedElement.focus();\n    }\n\n    this._previouslyFocusedElement = null;\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n      this._focusTrap = undefined;\n    }\n  }\n\n  /** Save a reference to the element focused before the popover was opened. */\n  private _savePreviouslyFocusedElement(): void {\n    if (this._document) {\n      this._previouslyFocusedElement = this._document.activeElement as HTMLElement;\n    }\n  }\n\n  /** Dispatch a notification to the notification service, if possible. */\n  private _dispatchConfigNotification(notification: PopoverNotification) {\n    if (this._notifications) {\n      this._notifications.dispatch(notification);\n    }\n  }\n\n  /** Dispatch a notification to the notification service and throw if unable to. */\n  private _dispatchActionNotification(notification: PopoverNotification) {\n    if (!this._notifications) {\n      throw getUnanchoredPopoverError();\n    }\n\n    this._notifications.dispatch(notification);\n  }\n\n  /** Throws an error if the alignment is not a valid horizontalAlign. */\n  private _validateHorizontalAlign(pos: SatPopoverHorizontalAlign): void {\n    if (VALID_HORIZ_ALIGN.indexOf(pos) === -1) {\n      throw getInvalidHorizontalAlignError(pos);\n    }\n  }\n\n  /** Throws an error if the alignment is not a valid verticalAlign. */\n  private _validateVerticalAlign(pos: SatPopoverVerticalAlign): void {\n    if (VALID_VERT_ALIGN.indexOf(pos) === -1) {\n      throw getInvalidVerticalAlignError(pos);\n    }\n  }\n\n  /** Throws an error if the scroll strategy is not a valid strategy. */\n  private _validateScrollStrategy(strategy: SatPopoverScrollStrategy): void {\n    if (VALID_SCROLL.indexOf(strategy) === -1) {\n      throw getInvalidScrollStrategyError(strategy);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport { BidiModule } from '@angular/cdk/bidi';\n\nimport { SatPopover } from './popover.component';\nimport { SatPopoverAnchor } from './popover-anchor.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    A11yModule,\n    BidiModule,\n  ],\n  declarations: [\n    SatPopover,\n    SatPopoverAnchor,\n  ],\n  exports: [\n    SatPopover,\n    SatPopoverAnchor,\n  ]\n})\nexport class SatPopoverModule { }\n"]}